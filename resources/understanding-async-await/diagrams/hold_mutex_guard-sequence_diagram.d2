shape: sequence_diagram

runtime: Async Runtime
main: main()
main_task: task (main.body)
fn_hold_mutex_guard: hold_mutex_guard()
hold_mutex_guard: HoldMutexGuard
waker: Waker
yieldless_mutex_access: task (yieldless_mutex_access)
mutex: Mutex<u64>
sa: (Side Effects)

main.fn -> runtime.block: block_on()
runtime.block -> main_task.poll1: poll()

main_task.poll1 -> runtime.block: spawn(yieldless_mutex_access())
main_task.poll1 <- runtime.block: JoinHandle {
  style.stroke-dash: 5
}

main_task.poll1 -> fn_hold_mutex_guard.fn: hold_mutex_guard()
main_task.poll1 <- fn_hold_mutex_guard.fn: HoldMutexGuard {
  style.stroke-dash: 5
}

main_task.poll1 -> hold_mutex_guard.poll1: poll()
hold_mutex_guard.poll1 -> mutex.lock1: lock()
hold_mutex_guard.poll1 <- mutex.lock1: MutexGuard {
  style.stroke-dash: 5
}
hold_mutex_guard.poll1 -> sa: println!("existing value: \{\}", *guard)

hold_mutex_guard.poll1 -> waker.fn: wake_by_ref()
waker.fn -> runtime.block.schedule: schedule(task)
waker.fn <- runtime.block.schedule: {
  style.stroke-dash: 5
}
hold_mutex_guard.poll1 <- waker.fn: {
  style.stroke-dash: 5
}

hold_mutex_guard.poll1 -> hold_mutex_guard.poll1: set state \nYielded \{ guard, _data \}
main_task.poll1 <- hold_mutex_guard.poll1: Poll::Pending {
  style.stroke-dash: 5
}
runtime.block <- main_task.poll1: Poll::Pending {
  style.stroke-dash: 5
}

runtime.block -> yieldless_mutex_access.poll1: poll()
yieldless_mutex_access.poll1 -> mutex.lock1.lock2: lock()
